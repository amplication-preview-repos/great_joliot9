/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Employer } from "./Employer";
import { EmployerCountArgs } from "./EmployerCountArgs";
import { EmployerFindManyArgs } from "./EmployerFindManyArgs";
import { EmployerFindUniqueArgs } from "./EmployerFindUniqueArgs";
import { CreateEmployerArgs } from "./CreateEmployerArgs";
import { UpdateEmployerArgs } from "./UpdateEmployerArgs";
import { DeleteEmployerArgs } from "./DeleteEmployerArgs";
import { JobFindManyArgs } from "../../job/base/JobFindManyArgs";
import { Job } from "../../job/base/Job";
import { User } from "../../user/base/User";
import { EmployerService } from "../employer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Employer)
export class EmployerResolverBase {
  constructor(
    protected readonly service: EmployerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "read",
    possession: "any",
  })
  async _employersMeta(
    @graphql.Args() args: EmployerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Employer])
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "read",
    possession: "any",
  })
  async employers(
    @graphql.Args() args: EmployerFindManyArgs
  ): Promise<Employer[]> {
    return this.service.employers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Employer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "read",
    possession: "own",
  })
  async employer(
    @graphql.Args() args: EmployerFindUniqueArgs
  ): Promise<Employer | null> {
    const result = await this.service.employer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Employer)
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "create",
    possession: "any",
  })
  async createEmployer(
    @graphql.Args() args: CreateEmployerArgs
  ): Promise<Employer> {
    return await this.service.createEmployer({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Employer)
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "update",
    possession: "any",
  })
  async updateEmployer(
    @graphql.Args() args: UpdateEmployerArgs
  ): Promise<Employer | null> {
    try {
      return await this.service.updateEmployer({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Employer)
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "delete",
    possession: "any",
  })
  async deleteEmployer(
    @graphql.Args() args: DeleteEmployerArgs
  ): Promise<Employer | null> {
    try {
      return await this.service.deleteEmployer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Job], { name: "jobs" })
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async findJobs(
    @graphql.Parent() parent: Employer,
    @graphql.Args() args: JobFindManyArgs
  ): Promise<Job[]> {
    const results = await this.service.findJobs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Employer): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
